package co.csadev.kellocharts.formatter

import co.csadev.kellocharts.model.*

open class ValueFormatter(decimalDigitsNumber: Int = Int.MIN_VALUE, appendedText: CharArray = CharArray(0), prependedText: CharArray = CharArray(0), decimalSeparator: Char = '.') {
    internal val valueFormatterHelper = ValueFormatterHelper(decimalDigitsNumber, appendedText, prependedText, decimalSeparator)

    var decimalDigitsNumber: Int
        get() = valueFormatterHelper.decimalDigitsNumber
        set(value) { valueFormatterHelper.decimalDigitsNumber = value }

    var appendedText: CharArray
        get() = valueFormatterHelper.appendedText
        set(value) { valueFormatterHelper.appendedText = value }

    var prependedText: CharArray
        get() = valueFormatterHelper.prependedText
        set(value) { valueFormatterHelper.prependedText = value }

    var decimalSeparator: Char
        get() = valueFormatterHelper.decimalSeparator
        set(value) { valueFormatterHelper.decimalSeparator = value }

    init {
        valueFormatterHelper.determineDecimalSeparator()
    }
}

class SimplePieChartValueFormatter(decimalDigitsNumber: Int = Int.MIN_VALUE, appendedText: CharArray = CharArray(0), prependedText: CharArray = CharArray(0), decimalSeparator: Char = '.') : ValueFormatter(decimalDigitsNumber, appendedText, prependedText, decimalSeparator), PieChartValueFormatter {
    override fun formatChartValue(formattedValue: CharArray, value: SliceValue)
            = valueFormatterHelper.formatFloatValueWithPrependedAndAppendedText(formattedValue, value.value, value.label)
}

class SimpleLineChartValueFormatter(decimalDigitsNumber: Int = Int.MIN_VALUE, appendedText: CharArray = CharArray(0), prependedText: CharArray = CharArray(0), decimalSeparator: Char = '.') : ValueFormatter(decimalDigitsNumber, appendedText, prependedText, decimalSeparator), LineChartValueFormatter {
    override fun formatChartValue(formattedValue: CharArray, value: PointValue)
            = valueFormatterHelper.formatFloatValueWithPrependedAndAppendedText(formattedValue, value.y, value.label)
}

class SimpleColumnChartValueFormatter(decimalDigitsNumber: Int = Int.MIN_VALUE, appendedText: CharArray = CharArray(0), prependedText: CharArray = CharArray(0), decimalSeparator: Char = '.') : ValueFormatter(decimalDigitsNumber, appendedText, prependedText, decimalSeparator), ColumnChartValueFormatter {
    override fun formatChartValue(formattedValue: CharArray, value: SubcolumnValue)
            = valueFormatterHelper.formatFloatValueWithPrependedAndAppendedText(formattedValue, value.value, value.label)
}

class SimpleBubbleChartValueFormatter(decimalDigitsNumber: Int = Int.MIN_VALUE, appendedText: CharArray = CharArray(0), prependedText: CharArray = CharArray(0), decimalSeparator: Char = '.') : ValueFormatter(decimalDigitsNumber, appendedText, prependedText, decimalSeparator), BubbleChartValueFormatter {
    override fun formatChartValue(formattedValue: CharArray, value: BubbleValue)
            = valueFormatterHelper.formatFloatValueWithPrependedAndAppendedText(formattedValue, value.z, value.label)
}

class SimpleAxisValueFormatter(decimalDigitsNumber: Int = Int.MIN_VALUE, appendedText: CharArray = CharArray(0), prependedText: CharArray = CharArray(0), decimalSeparator: Char = '.') : ValueFormatter(decimalDigitsNumber, appendedText, prependedText, decimalSeparator), AxisValueFormatter {
    override fun formatValueForManualAxis(formattedValue: CharArray, axisValue: AxisValue)
            = valueFormatterHelper.formatFloatValueWithPrependedAndAppendedText(formattedValue, axisValue.value, axisValue.label)
    override fun formatValueForAutoGeneratedAxis(formattedValue: CharArray, value: Float, autoDecimalDigits: Int)
            = valueFormatterHelper.formatFloatValueWithPrependedAndAppendedText(formattedValue, value, autoDecimalDigits)
}
